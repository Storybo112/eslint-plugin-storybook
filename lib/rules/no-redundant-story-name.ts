/**
 * @fileoverview Named exports should not use the name annotation if it is redundant to the name that would be generated by the export name
 * @author Yann Braga
 */

import { storyNameFromExport } from '@storybook/csf'
import {
  getExportNamedIdentifierDeclaration,
  getObjectBareProperty,
  getObjectBarePropertyValue,
} from '../utils'

import {
  isExpressionStatement,
  isIdentifier,
  isObjectExpression,
  isMetaProperty,
} from '../utils/ast'
import { CategoryId } from '../utils/constants'
import { createStorybookRule } from '../utils/create-storybook-rule'

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

export = createStorybookRule({
  name: 'no-redundant-story-name',
  defaultOptions: [],
  meta: {
    type: 'suggestion',
    fixable: 'code',
    hasSuggestions: true,
    docs: {
      description: 'A story should not have a redundant name property',
      categories: [CategoryId.CSF, CategoryId.RECOMMENDED],
      recommended: 'warn',
    },
    messages: {
      removeRedundantName: 'Remove redundant name',
      storyNameIsRedundant:
        'Named exports should not use the name annotation if it is redundant to the name that would be generated by the export name',
    },
    schema: [],
  },

  create(context) {
    //----------------------------------------------------------------------
    // Public
    //----------------------------------------------------------------------

    return {
      // CSF3
      ExportNamedDeclaration: function (node) {
        const declaration = getExportNamedIdentifierDeclaration(node)
        if (declaration && isObjectExpression(declaration.init)) {
          const storyNameNode =
            getObjectBareProperty(declaration.init.properties, 'name') ||
            getObjectBareProperty(declaration.init.properties, 'storyName')

          if (storyNameNode) {
            const resolvedStoryName = storyNameFromExport(declaration.id.name)
            const storyName = getObjectBarePropertyValue(storyNameNode)

            if (storyName === resolvedStoryName) {
              context.report({
                node: storyNameNode,
                messageId: 'storyNameIsRedundant',
                suggest: [
                  {
                    messageId: 'removeRedundantName',
                    fix: function (fixer) {
                      return fixer.remove(storyNameNode)
                    },
                  },
                ],
              })
            }
          }
        }
      },
      // CSF2
      AssignmentExpression: function (node) {
        if (!isExpressionStatement(node.parent)) return

        const { left, right } = node

        if (
          'property' in left &&
          isIdentifier(left.property) &&
          !isMetaProperty(left) &&
          left.property.name === 'storyName'
        ) {
          if (!('name' in left.object && 'value' in right)) return

          const propertyName = left.object.name
          const propertyValue = right.value
          const resolvedStoryName = storyNameFromExport(propertyName)

          if (propertyValue === resolvedStoryName) {
            context.report({
              node: node,
              messageId: 'storyNameIsRedundant',
              suggest: [
                {
                  messageId: 'removeRedundantName',
                  fix: function (fixer) {
                    return fixer.remove(node)
                  },
                },
              ],
            })
          }
        }
      },
    }
  },
})
